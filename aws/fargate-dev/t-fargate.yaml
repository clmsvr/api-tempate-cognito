AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Prefix:
    Type: String

  VPC:
    Type: String

  Subnet1:
    Type: String

  RepositoryName:
    Type: String

  TaskCpu:
    Type: Number
    
  TaskMemory:
    Type: Number

  DBAppUser:
    Type: String

  DBAppPassword:
    Type: String

  DBAppDatabase:
    Type: String

  RdsEndpoint:
    Type: String

  UserPool:
    Type: String            


Resources:

  AppBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Prefix}-${AWS::AccountId}'

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Prefix}-cluster"
      
  #permissao para o fargate baixar imagens do ecr, geerar logs, executar tasks
  FargateTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ## Role acima feita de outra forma 
  # TaskExecutionRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: 'ecs-tasks.amazonaws.com'
  #         Action: 'sts:AssumeRole'
  #     Policies:
  #     - PolicyName: AmazonECSTaskExecutionRolePolicy # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - 'ecr:GetAuthorizationToken'
  #           - 'ecr:BatchCheckLayerAvailability'
  #           - 'ecr:GetDownloadUrlForLayer'
  #           - 'ecr:BatchGetImage'
  #           Resource: '*'
  #         - Effect: Allow
  #           Action:
  #           - 'logs:CreateLogStream'
  #           - 'logs:PutLogEvents'
  #           Resource: !GetAtt 'LogGroup.Arn'

  #permissões necessarias para a aplicação no container
  #cognito(sdk),ec3(sdk)
  #rds nao precisa
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole              
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser   #https://docs.aws.amazon.com/aws-managed-policy/latest/reference/AmazonCognitoPowerUser.html
      Policies:
      - PolicyName: S3AccessPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            - 's3:PutObjectAcl'
            - 's3:PutObjectVersionAcl'
            - 's3:ListBucket'
            Resource: !Sub '${AppBucket.Arn}'

  # #exemplo      
  # TaskRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service: 'ecs-tasks.amazonaws.com'
  #         Action: 'sts:AssumeRole'
  #     Policies:
  #     - PolicyName: S3AccessPolicy
  #       PolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - 's3:GetObject'
  #           - 's3:PutObject'
  #           - 's3:DeleteObject'
  #           - 's3:PutObjectAcl'
  #           - 's3:PutObjectVersionAcl'
  #           Resource: !Sub '${Bucket.Arn}/*'
  #         - Effect: Allow
  #           Action:
  #           - 's3:ListBucket'
  #           Resource: !Sub '${Bucket.Arn}'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub ${Prefix}-LogGroup
      RetentionInDays: 1     

  TaskDefinition1:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref FargateTaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      # Family: !Ref 'AWS::StackName'    # A family groups multiple versions of a task definition.
      ContainerDefinitions:
        - Name: !Sub "${Prefix}-containerDefinitions1"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:latest"
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          # Memory: 512
          # MemoryReservation: 256
          # Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref Prefix          
          Environment:
          - Name: 'SPRING_DATASOURCE_USERNAME'
            Value: !Ref DBAppUser
          - Name: 'SPRING_DATASOURCE_PASSWORD'
            Value: !Ref DBAppPassword
          - Name: 'SPRING_DATASOURCE_URL'
            Value: !Sub jdbc:mysql://${RdsEndpoint}:3306/${DBAppDatabase}?createDatabaseIfNotExist=true&serverTimezone=UTC
          - Name: 'SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWK_JWK-SET-URI'
            Value: !Sub https://cognito-idp.us-east-1.amazonaws.com/${UserPool}/.well-known/jwks.json
          - Name: 'COGNITO_POOL-ID'
            Value: !Ref UserPool
          - Name: 'TEMPLATE_STORAGE_S3_BUCKET'
            Value: !Ref AppBucket
          - Name: 'TEMPLATE_STOREGE_S3_REGION'
            Value: !Ref 'AWS::Region'

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Prefix}-ServiceSecurityGroup
      GroupDescription: Allow HTTP/HTTPS.
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080   # You can allow a range of ports or set FromPort = ToPort.
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443  
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp  
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'          
      SecurityGroupEgress: 
      - CidrIp: '0.0.0.0/0'
        IpProtocol: "-1"    # -1 specify all protocols. Allows traffic on all ports, regardless of any port range you specify.

  Service1:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${Prefix}-service1"
      Cluster: !Ref Cluster
      LaunchType: FARGATE
      DesiredCount: 0
      TaskDefinition: !Ref TaskDefinition1
      ##HealthCheckGracePeriodSeconds: 300  # !! The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started. This is only used when your service is configured to use a load balancer. 
      PlatformVersion: '1.4.0'            #Livro: From time to time, AWS releases a new Fargate plattform with additional features. We highly recommend specifying a platform version instead of using LATEST to avoid problems in production.
      NetworkConfiguration:
        AwsvpcConfiguration:
          # Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
          AssignPublicIp: ENABLED     # Livro: When deploying to a public subnet, assigning public IP addresses is required to ensure outbound connectivity.
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref Subnet1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:   #Livro: By enabling the deployment circuit breaker, you ensure that ECS will not try forever to deploy a broken version
          Enable: true      
          Rollback: true            # valtar para a ultima versao que funcionou

Outputs:
  FargateService:
    Value: !Ref Service1

  FargateServiceName:
    Value: !GetAtt 'Service1.Name'

  FargateCluster:
    Value: !Ref Cluster
