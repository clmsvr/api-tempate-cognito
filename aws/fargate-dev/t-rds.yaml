AWSTemplateFormatVersion: "2010-09-09"
Description: "Create a MYSQL Database"

Parameters:
  Prefix:
    Type: String

  VPC:
    Type: String
    Description: The VPC to create the cluster

  Subnet1:
    Type: String
    Description: The subnet for the DB cluster

  Subnet2:
    Type: String
    Description: The subnet for the DB cluster

  Username:
    Type: String
    Description: The username for our database.
  
  Password:
    Type: String
    Description: The password for the database.
    NoEcho: true

Resources:

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: "Database instances security group"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        CidrIp: '0.0.0.0/0'
      - IpProtocol: icmp  
        FromPort: -1
        ToPort: -1
        CidrIp: '0.0.0.0/0'          
      SecurityGroupEgress: 
      - CidrIp: '0.0.0.0/0'
        IpProtocol: "-1"    # -1 specify all protocols. Allows traffic on all ports, regardless of any port range you specify.

  DBSubnetGroup:                     # Defines the subnets the RDS database instance will launch into
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: "Subnet Group for mySQL database"
      SubnetIds:         # minimo 2 subnets
      - !Ref Subnet1
      - !Ref Subnet2

  Database:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete           # For AWS::RDS::DBInstance resources that don't specify the DBClusterIdentifier property, the default policy is 'Snapshot' which can cause unwanted costs. However, for production setups, we highly recommend to stay with the default to avoid data loss.
    ##DependsOn: VPCGatewayAttachment
    Properties:
      PubliclyAccessible: true           # If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address. 
      ## DBName: !Sub appdata  (via Script) # Nome para um banco de dados da aplicação. Schema. letras e numeros
      AllocatedStorage: '5'              # Storage size of your database in GB
      DBInstanceClass: 'db.t3.micro'     # Size (also known as instance type) of the underlying virtual machine
      Engine: MySQL                      # Database engine you want to use
      MasterUsername: !Ref Username      # Name for the admin user
      MasterUserPassword: !Ref Password  # Password for the admin user
      BackupRetentionPeriod: 0           # Disables backups. (Turn this on in production.)
      #PreferredBackupWindow: '05:00-06:00'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
        - !Ref DatabaseSecurityGroup     # !Sub ${DatabaseSecurityGroup.GroupId}
    
      # DBInstanceIdentifier: aws-dxl-database-1
      # MultiAZ: true
      # EngineVersion: 8.0.20
      # AutoMinorVersionUpgrade: true
      # Iops: 1000
      # PubliclyAccessible: false
      # StorageType: io1
      # Port: 3306
      # StorageEncrypted: true
      # CopyTagsToSnapshot: true
      # MonitoringInterval: 60
      # EnableIAMDatabaseAuthentication: false
      # EnablePerformanceInsights: true
      # PerformanceInsightsRetentionPeriod: 7
      # DeletionProtection: true
      # MaxAllocatedStorage: 1000
      # DBParameterGroupName: !Ref ParameterGroup
      # MonitoringRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/rds-monitoring-role"




Outputs:
  Repository:
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${Prefix}-rds-endpoint
