
##spring.profiles.active=DEV

#DEV
#logging.level.org.springframework=debug
#server.port=8080

#ALL
# 24.10 DB_HOST : variavel de ambiente 
# poderia usar aqui o nome do container docker (jdbc:mysql://algafood-mysql:3307) , que o Docker resolve para containers na mesma rede. 
spring.datasource.url=jdbc:mysql://localhost:3307/template-api-cognito?createDatabaseIfNotExist=true&serverTimezone=UTC

#DEV PROD
spring.datasource.username=root
spring.datasource.password=mysql

#DEV
#usado somente para auxiliar o desenvolvimento para criar as tabelas
#Desabilitado a partir do momento em que comecamos a usar o Flyway
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=create

#DEV
## Usado somente para gerar o DDL do banco pelo JPA (Com os Imports)  
## Comentar novamente depois.
## se desabilitar vai passar a ler o arquivo "import.sql"
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=src/main/resources/ddl.sql

#DEV
## Dados de Test  para substituir o "import.sql" que foi usado antes do Flyway
## Sera usado o arquivo de callback:  afterMigrate.sql localizado em "db/testData"
## a pasta testData nao deve ser mapeada para PRODUCAO
spring.flyway.locations=classpath:db/migration,classpath:db/testData

#DEV
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect(800)

#DEV
## Configurar o Pool de Conexoes Hikari
#spring.datasource.hikari.maximum-pool-size=5
#spring.datasource.hikari.minimum-idle=3
#spring.datasource.hikari.idle-timeout=10000

#ALL
## Habilitar geracao de erro ao desserializar objetos JSON na api
## quando o usuario informar campos que nao exitem na API.
## ou seja , nao iguinorar este tipo de ocorrencia.
spring.jackson.deserialization.fail-on-unknown-properties=true
## indicar erro tambem ao detectar propriedade anotadas com @JsonIgnore
spring.jackson.deserialization.fail-on-ignored-properties=true

#ALL
#8.26
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.add-mappings=false

#DEV
#11.19 notacao "snacke case" ou "lower camel case"
#spring.jackson.property-naming-strategy=SNAKE_CASE

#ALL - SprngDoc
#26.3 para usar quando tiver somente UM(1) Objeto OpenAPI, uma documentação
springdoc.packages-to-scan=root.api
##springdoc.paths-to-match=/**

## https://github.com/swagger-api/swagger-ui/blob/master/docs/usage/configuration.md
## https://springdoc.org/properties.html
## Ordenacao
springdoc.swagger-ui.operationsSorter=alpha
#springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.tagsSorter=alpha

#26.5 - configuracao acesso do Swagger UI à aplicacao
springdoc.oAuthFlow.authorizationUrl=http://127.0.0.1:8080/oauth2/authorize
springdoc.oAuthFlow.tokenUrl=http://127.0.0.1:8080/oauth2/token
springdoc.swagger-ui.oauth.client-id=postman1
springdoc.swagger-ui.oauth.client-secret=123
springdoc.swagger-ui.oauth.use-pkce-with-authorization-code-grant=true
springdoc.swagger-ui.oauth.use-basic-authentication-with-access-code-grant=true

# DEV
#### 19.38
#server.compression.enabled=true
##server.compression.min-response-size=2KB

## LOGGING
# DEV  PROD
#21.04
#loggly.token=<SECRET TOKEN>

# DEV - Security
#22.2 usuario e senha para acesso aa aplicação com http basic
#spring.security.user.name=user
#spring.security.user.password=123

# DEV - Security - Resource Server
#22.11 Configurando o Resource Server com a nova stack do Spring Security
#quando usamos opaque toquem, precidamos da url da api de introspecção do servidor.
#spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://auth-server:8080/oauth2/introspect
#spring.security.oauth2.resourceserver.opaquetoken.client-id=resource-server
#spring.security.oauth2.resourceserver.opaquetoken.client-secret=123
#
#spring.security.oauth2.resourceserver.jwt.public-key-location=classpath:key/authserver-pkey.pem

# ALL
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://cognito-idp.us-east-1.amazonaws.com/us-east-1_mFMqNTvYk/.well-known/jwks.json
cognito.pool-id=us-east-1_mFMqNTvYk


## 25.27 - Configurando o protocolo HTTPS nos links da API com HATEOAS
# obter informações dos cabeçalhos: X-Forwarded-Host, X-Forwarded-Proto
server.forward-headers-strategy=framework

##spring.cache.cache-names=authorities
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=50,expireAfterAccess=600s
